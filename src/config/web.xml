<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC
	"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
	"http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
	<display-name>vu360-lms</display-name>
	<description>vu360-lms application</description>

	<distributable />
	<!-- - Key of the system property that should specify the root directory 
		of this - web app. Applied by WebAppRootListener or Log4jConfigListener. -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>vu360-lms.root</param-value>
	</context-param>

	<filter>
		<filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
		<init-param>
		    <param-name>entityManagerFactoryBeanName</param-name>
		    <param-value>entityManagerFactory</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>  
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/applicationContext.xml
			/WEB-INF/applicationContext-security.xml
			/WEB-INF/spring-ws-servlet.xml
		</param-value>
	</context-param>

	<!-- - Location of the Log4J config file, for initialization and refresh 
		checks. - Applied by Log4jConfigListener. -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.xml</param-value>
	</context-param>

	<context-param>
		<param-name>defaultHtmlEscape</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Spring Security -->
	<!-- To integrate Spring security with a Spring MVC web application, just declares DelegatingFilterProxy as a servlet filter to intercept any incoming request -->

	  <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	 

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- - Loads the root application context of this web app at startup, - 
		by default from "/WEB-INF/applicationContext.xml". - Note that you need to 
		fall back to Spring's ContextLoaderServlet for - J2EE servers that do not 
		follow the Servlet 2.4 initialization order. - - Use WebApplicationContextUtils.getWebApplicationContext(servletContext) 
		- to access it anywhere in the web application, outside of the framework. 
		- - The root context is the parent of all servlet-specific contexts. - This 
		means that its beans are automatically available in these child contexts, 
		- both for getBean(name) calls and (external) bean references. -->

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- - Servlet that dispatches request to registered handlers (Controller 
		implementations). - Has its own application context, by default defined in 
		"{servlet-name}-servlet.xml", - i.e. "vu360-lms-servlet.xml". - - A web app 
		can contain any number of such servlets. - Note that this web app has a shared 
		root application context, serving as parent - of all DispatcherServlet contexts. -->

	<servlet>
		<servlet-name>vu360-lms</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>brands-reset</servlet-name>
		<servlet-class>com.softech.vu360.lms.servlet.BrandsResetServlet</servlet-class>
		<load-on-startup>98</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>spring-web-json</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>spring-ws</servlet-name>
		<servlet-class>org.springframework.ws.transport.http.MessageDispatcherServlet</servlet-class>
		<init-param>
			<param-name>transformWsdlLocations</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>99</load-on-startup>
	</servlet>
	
	<!-- RESTful Servlet: A servlet named restful is declared, which is of type 
		DispatcherServlet. In Spring MVC, each DispatchServlet will have its own 
		WebApplicationContext (however, all service-layer beans defined in the root-context.xml 
		file, which called the root WebApplicationContext, will be available for 
		each servlets own WebApplicationContext too). -->
	<servlet>
		<servlet-name>restful</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/restful-context.xml</param-value>
		</init-param>
	</servlet>

	<!-- The <servlet-mapping> tag instructs the web container (for example, 
		Tomcat) that all URLs under the pattern /restful/* (for example, http://localhost:8080/lms/restful/contact) 
		will be handled by the restful servlet. -->
	<servlet-mapping>
		<servlet-name>restful</servlet-name>
		<url-pattern>/restful/*</url-pattern>
	</servlet-mapping>	
	<servlet-mapping>
		<servlet-name>restful</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>

	<!-- - Maps the vu360-lms dispatcher to *.do. All handler mappings in - 
		vu360-lms-servlet.xml will by default be applied to this subpath. - If a 
		mapping isn't a /* subpath, the handler mappings are considered - relative 
		to the web app root. - - NOTE: A single dispatcher can be mapped to multiple 
		paths, like any servlet. -->

    <servlet-mapping>
		<servlet-name>vu360-lms</servlet-name>
		<url-pattern>*.launch</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>vu360-lms</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>brands-reset</servlet-name>
		<url-pattern>/brandsreset</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>vu360-lms</servlet-name>
		<url-pattern>/completionCertificate.pdf</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>vu360-lms</servlet-name>
		<url-pattern>/printProctorCompletionCertificate.pdf</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>vu360-lms</servlet-name>
		<url-pattern>/printAffidavits.pdf</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>spring-web-json</servlet-name>
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>spring-ws</servlet-name>
		<url-pattern>/service/*</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>25</session-timeout>
	</session-config>

<!-- 	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
	</welcome-file-list>

	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page> -->

</web-app>

